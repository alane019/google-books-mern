{"version":3,"sources":["books-512.png","components/PageHeading.js","utils/API.js","components/Form.js","components/PageMain.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","PageHeading","style","padding","className","fontSize","marginBottom","src","logo","id","alt","color","paddingLeft","marginTop","Intl","DateTimeFormat","dateStyle","timeStyle","format","getSearchResults","query","resp","axios","get","then","console","log","catch","err","api","Form","props","type","placeholder","value","search","onChange","handTextInput","onClick","handleClick","PageMain","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,uC,yLCqB5BC,MAhBf,WACE,OAEE,yBAAKC,MAAO,CAACC,QAAS,IAAKC,UAAU,wBAC/B,wBAAIF,MAAO,CAACG,SAAU,GAAIC,aAAc,EAAGH,QAAS,IAAKC,UAAU,aAAnE,8BAEA,yBAAKG,IAAKC,IAAMJ,UAAU,WAAWK,GAAG,MAAMC,IAAI,SAClD,6EAEA,uBAAGR,MAAO,CAACS,MAAM,OAAQC,YAAa,GAAIC,UAAW,GAAIT,UAAU,QAClE,IAAIU,KAAKC,eAAe,QAAS,CAAEC,UAAW,OAAQC,UAAW,UAAWC,Y,iBCRxE,GACPC,iBAAkB,SAASC,GACxB,IAAIC,EAAOC,IAAMC,IAPZ,iDAO0BH,GAC9BI,MAAK,WAAOC,QAAQC,IAAIL,MACxBM,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QCJrCH,QAAQC,IAAI,QAAUG,GACtBJ,QAAQC,IAAI,QAAUG,GAEtB,IAgBeC,EAhBD,SAACC,GACX,OACI,yBAAK3B,UAAU,kBACX,8BACI,2BACIA,UAAU,eACV4B,KAAK,OACLC,YAAY,gCACZC,MAAOH,EAAMI,OACbC,SAAUL,EAAMM,gBAEpB,4BAAQC,QAAS,kBAlBf,SAASP,GACvBN,QAAQC,IAAI,eAAiBK,GAiBMQ,KAAvB,eCRDC,EAPE,SAACT,GAEd,OACI,kBAAC,EAAD,OCSOU,MAZf,WAEE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBCFfsC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTzB,MAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1BlC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAiC,GACLnC,QAAQmC,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MACZC,SAASC,eAAe,SDab,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,GAAN,sBAENxB,EAwCX,SAAiCO,GAE/BoB,MAAMpB,GACHzB,MAAK,SAAA8C,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQjD,IAAI,gBAAgBkD,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMlD,MAAK,SAAA6B,GACjCA,EAAasB,aAAanD,MAAK,WAC7BoB,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBtB,OAAM,WACLF,QAAQC,IACN,oEAzDAmD,CAAwB5B,GAHxBD,EAAgBC,OC5BxB6B,K","file":"static/js/main.2e931b2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/books-512.8de69993.png\";","//Header component is rendered to the top of each page\r\nimport React from \"react\";\r\nimport logo from \"../books-512.png\";\r\n\r\n\r\nfunction PageHeading() {\r\n  return (\r\n\r\n    <div style={{padding: 15}} className=\"App-Header container\">\r\n          <h1 style={{fontSize: 30, marginBottom: 0, padding: 10}} className=\"display-4\">Google Books Data Explorer</h1>\r\n\r\n          <img src={logo} className=\"App-logo\" id=\"top\" alt=\"logo\" />\r\n          <p>Explore and Save Lists of Google Books Results</p>\r\n\r\n          <p style={{color:\"gray\", paddingLeft: 12, marginTop: 0}} className=\"lead\">{\r\n          (new Intl.DateTimeFormat('en-US', { dateStyle: 'full', timeStyle: 'short' }).format())\r\n          }</p>\r\n        </div>\r\n  );\r\n}\r\n\r\nexport default PageHeading;\r\n","import axios from \"axios\"; \r\n\r\nconst baseUrl = \"https://www.googleapis.com/books/v1/volumes?q=\";\r\n// const apiKey = process.env.apikey; \r\n// console.log({apiKey});\r\n\r\n\r\nexport default {\r\n        getSearchResults: function(query) {\r\n           let resp = axios.get(baseUrl + query)\r\n           .then(() => {console.log(resp)})\r\n           .catch(err => console.log(err))\r\n    }\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport api from \"../utils/API\";\r\n\r\nlet handleClick = function(props){\r\n    console.log(\"handlclick: \" + props);\r\n}\r\n\r\nconsole.log(\"API: \" + api);\r\nconsole.log(\"API: \" + api);\r\n\r\nconst  Form = (props)  =>  {\r\n    return( \r\n        <div className=\"form-container\">\r\n            <form>\r\n                <input \r\n                    className=\"search-input\" \r\n                    type=\"text\" \r\n                    placeholder=\"Search for a book by name... \"\r\n                    value={props.search}\r\n                    onChange={props.handTextInput}\r\n                />\r\n                <button onClick={() => handleClick()}> Search </button>\r\n            </form>\r\n        </div>\r\n    ); \r\n}\r\nexport default Form;\r\n","import React, { useState, useEffect} from \"react\";\r\n//import axios from \"../utils/API\"\r\nimport Form from \"./Form\";\r\n\r\n// useState, useEffect should be used here \r\n\r\nconst PageMain = (props)  => {\r\n\r\n    return(\r\n        <Form />\r\n    );\r\n};\r\n\r\nexport default PageMain;\r\n\r\n{/*             \r\n            <div class=\"bookbox\">\r\n                    <b> \"{title}\" </b>\r\n                    <i>\"{authors}\"</i>   \r\n                    <img src=\"https://loremflickr.com/320/240?random=2\" />   \r\n                    <a  href=\"http://books.google.com/books?id=sazytgAACAAJ&dq=title:The+Hunger+Games&hl=&source=gbs_api\">books link  </a>\r\n                    <p className=\"text-box\">  description: \"Set in a dark vision of the near future, a \r\n                        terrifying ... Katniss has been close to death before. For her, \r\n                        survival is second nature.</p>\r\n            </div> */}\r\n\r\n\r\n\r\n/* Example: \r\n{\r\n title: \"The Hunger Games\"\r\n  authors: [\"Suzanne Collins\"]\r\n  description: \"Set in a dark vision of the near future, a \r\n  terrifying ... Katniss has been close to death before. For her, \r\n     survival is second nature.\"\r\n  image: \"http://books.google.com/books/content?id=sazytgAACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api\"\r\n  link: \"http://books.google.com/books?id=sazytgAACAAJ&dq=title:The+Hunger+Games&hl=&source=gbs_api\"\r\n}\r\n\r\n*/\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport PageHeading from \"./components/PageHeading\";\r\nimport PageMain from \"./components/PageMain\";\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <PageHeading />\r\n      <PageMain />\r\n      <div className=\"App-header\">\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, \r\n    document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}